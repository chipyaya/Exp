function BossAmmo.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push constant 50
pop static 3
push static 3
call Array.new 1
pop static 0
push static 3
call Array.new 1
pop static 1
push pointer 0
call BossAmmo.Init 1
pop temp 0
push constant 2
pop static 2
push constant 10
pop this 0
call Ground.getTop 0
push static 2
sub
pop this 2
push pointer 0
return
function BossAmmo.dispose 0
push argument 0
pop pointer 0
push pointer 0
call BossAmmo.eraser 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function BossAmmo.eraser 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push static 3
lt
not
if-goto WHILE_END0
push local 0
push static 1
add
pop pointer 1
push that 0
push constant 1
neg
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push static 0
add
pop pointer 1
push that 0
push local 0
push static 1
add
pop pointer 1
push that 0
push local 0
push static 0
add
pop pointer 1
push that 0
push static 2
add
push local 0
push static 1
add
pop pointer 1
push that 0
push static 2
add
call Screen.drawRectangle 4
pop temp 0
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function BossAmmo.Init 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push static 3
lt
not
if-goto WHILE_END0
push local 0
push static 1
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function BossAmmo.attack 4
call Boss.getX 0
pop local 0
call Boss.getY 0
pop local 1
call Boss.getPipeCenter 0
pop local 2
push constant 0
pop local 3
label WHILE_EXP0
push local 3
push static 3
lt
not
if-goto WHILE_END0
push local 3
push static 1
add
pop pointer 1
push that 0
push constant 1
neg
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 3
push static 0
add
push local 0
push local 2
sub
push static 2
push constant 2
call Math.divide 2
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 3
push static 1
add
push local 1
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 3
push constant 1
add
pop local 3
push local 3
push static 0
add
push local 0
push static 2
push constant 2
call Math.divide 2
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 3
push static 1
add
push local 1
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 3
push constant 1
add
pop local 3
push local 3
push static 0
add
push local 0
push local 2
add
push static 2
push constant 2
call Math.divide 2
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 3
push static 1
add
push local 1
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
label IF_FALSE0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function BossAmmo.run 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push static 3
lt
not
if-goto WHILE_END0
push pointer 0
push local 0
call BossAmmo.drawBossAmmo 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function BossAmmo.drawBossAmmo 0
push argument 0
pop pointer 0
push argument 1
push static 1
add
pop pointer 1
push that 0
push constant 1
neg
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 0
call Screen.setColor 1
pop temp 0
push argument 1
push static 0
add
pop pointer 1
push that 0
push argument 1
push static 1
add
pop pointer 1
push that 0
push argument 1
push static 0
add
pop pointer 1
push that 0
push static 2
add
push constant 1
add
push argument 1
push static 1
add
pop pointer 1
push that 0
push static 2
add
push constant 1
add
call Screen.drawRectangle 4
pop temp 0
push argument 1
push static 1
add
push argument 1
push static 1
add
pop pointer 1
push that 0
push this 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push pointer 0
push argument 1
call BossAmmo.OverScreen 2
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
push static 1
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
label IF_FALSE1
push pointer 0
push argument 1
call BossAmmo.Hit 2
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
push static 1
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
label IF_FALSE2
push argument 1
push static 0
add
pop pointer 1
push that 0
push constant 0
lt
push argument 1
push static 0
add
pop pointer 1
push that 0
push constant 255
gt
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
return
label IF_FALSE3
push argument 1
push static 1
add
pop pointer 1
push that 0
push constant 0
lt
push argument 1
push static 1
add
pop pointer 1
push that 0
push static 2
add
and
push this 2
gt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
return
label IF_FALSE4
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push static 0
add
pop pointer 1
push that 0
push argument 1
push static 1
add
pop pointer 1
push that 0
push argument 1
push static 0
add
pop pointer 1
push that 0
push static 2
add
push argument 1
push static 1
add
pop pointer 1
push that 0
push static 2
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function BossAmmo.OverScreen 0
push argument 0
pop pointer 0
push argument 1
push static 1
add
pop pointer 1
push that 0
push static 2
add
push this 2
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push constant 0
return
function BossAmmo.Hit 3
push argument 0
pop pointer 0
call Player2.getX 0
pop local 0
call Player2.getY 0
pop local 1
call Player2.getSize 0
pop local 2
push argument 1
push static 1
add
pop pointer 1
push that 0
push constant 1
neg
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push argument 1
push static 0
add
pop pointer 1
push that 0
push static 2
add
push local 0
lt
not
push argument 1
push static 0
add
pop pointer 1
push that 0
push local 0
push local 2
add
gt
not
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
push static 1
add
pop pointer 1
push that 0
push static 2
add
push local 1
lt
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
call Player2.hpReduce 0
pop temp 0
push constant 0
not
return
label IF_FALSE2
label IF_FALSE1
push constant 0
return
